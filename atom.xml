<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OpticHong&#39;s Blog</title>
  
  
  <link href="https://gme-hong.github.io/atom.xml" rel="self"/>
  
  <link href="https://gme-hong.github.io/"/>
  <updated>2024-04-22T06:31:36.534Z</updated>
  <id>https://gme-hong.github.io/</id>
  
  <author>
    <name>OpticHong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ha ha</title>
    <link href="https://gme-hong.github.io/2024/04/19/haha/"/>
    <id>https://gme-hong.github.io/2024/04/19/haha/</id>
    <published>2024-04-19T14:42:49.000Z</published>
    <updated>2024-04-22T06:31:36.534Z</updated>
    
    <content type="html"><![CDATA[<p>嘿嘿，今天不深沉，分享一个竞赛群里面有意思段子：</p><img lazyload src="/images/loading.svg" data-src="/2024/04/19/haha/WechatIMG683.png" class title="WechatIMG683">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;嘿嘿，今天不深沉，分享一个竞赛群里面有意思段子：&lt;/p&gt;
&lt;img lazyload src=&quot;/images/loading.svg&quot; data-src=&quot;/2024/04/19/haha/WechatIMG683.png&quot; class title=&quot;WechatIMG6</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>A thought-provoking word</title>
    <link href="https://gme-hong.github.io/2024/04/07/word/"/>
    <id>https://gme-hong.github.io/2024/04/07/word/</id>
    <published>2024-04-07T10:52:01.000Z</published>
    <updated>2024-04-07T11:10:38.450Z</updated>
    
    <content type="html"><![CDATA[<p>I was elated today because my instructor praised my dissertation proposal at the group meeting. Of course, I was not present because of the class. I learnt about it from senior sister apprentice Huai Yao. I instinctively told her, “Don’t make a fuss, you’ll make me shy”. Then Huai Yao said something very profound to me. </p><img lazyload src="/images/loading.svg" data-src="/2024/04/07/word/image-20240407185256571.png" class title="image-20240407185256571"><p>I was thinking, it seems like we’ve always been taught to learn to be humble in our dealings with others. But this mellow wisdom in dealing with people is supposed to stay only in the world outside of ourselves. If our hearts are constantly infested with this kind of thinking, it’s easy to fail to recognise where we are.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I was elated today because my instructor praised my dissertation proposal at the group meeting. Of course, I was not present because of t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>A thrilling train</title>
    <link href="https://gme-hong.github.io/2024/03/17/%E4%B8%80%E6%AC%A1%E6%83%8A%E5%BF%83%E5%8A%A8%E9%AD%84%E7%9A%84train/"/>
    <id>https://gme-hong.github.io/2024/03/17/%E4%B8%80%E6%AC%A1%E6%83%8A%E5%BF%83%E5%8A%A8%E9%AD%84%E7%9A%84train/</id>
    <published>2024-03-17T07:13:03.000Z</published>
    <updated>2024-04-22T06:31:16.060Z</updated>
    
    <content type="html"><![CDATA[<p>前一段时间好不容易把模型跑通，跑通后却发现模型的效果一直很差。</p><p>一个ViT模型比起参数量差了10个量级的CNN模型效果差很多是不敢想象。</p><p>为此，我又多般调整模型的架构（基于VIT搭的模型比较复杂，采用了大量的Mask设计，所以很难判断到底是哪一部分出了问题）。</p><p>今天下午三点左右，将模型的Decoder部分进行调整，模型的训练如下（每一个epoch只训练了很小一部分的数据）：</p><img lazyload src="/images/loading.svg" data-src="/2024/03/17/%E4%B8%80%E6%AC%A1%E6%83%8A%E5%BF%83%E5%8A%A8%E9%AD%84%E7%9A%84train/image-20240317151355373.png" class title="image-20240317151355373"><p>这些数字看得真是惊心动魄！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前一段时间好不容易把模型跑通，跑通后却发现模型的效果一直很差。&lt;/p&gt;
&lt;p&gt;一个ViT模型比起参数量差了10个量级的CNN模型效果差很多是不敢想象。&lt;/p&gt;
&lt;p&gt;为此，我又多般调整模型的架构（基于VIT搭的模型比较复杂，采用了大量的Mask设计，所以很难判断到底是哪一部</summary>
      
    
    
    
    
    <category term="Grasp Detection" scheme="https://gme-hong.github.io/tags/Grasp-Detection/"/>
    
  </entry>
  
  <entry>
    <title>久违的放晴</title>
    <link href="https://gme-hong.github.io/2024/03/11/%E4%B9%85%E8%BF%9D%E7%9A%84%E6%94%BE%E6%99%B4/"/>
    <id>https://gme-hong.github.io/2024/03/11/%E4%B9%85%E8%BF%9D%E7%9A%84%E6%94%BE%E6%99%B4/</id>
    <published>2024-03-11T08:46:07.000Z</published>
    <updated>2024-03-17T07:11:48.172Z</updated>
    
    <content type="html"><![CDATA[<p><i class="fa-solid fa-location-dot"></i> Location: Wucheng campus of Shanxi University, Taiyuan, China</p><p>Date: 2024-03-11</p><p>Mood: 下午上完第一节课后，突然感觉周围的一切都很清爽！</p><p>Ps: 可能是这数字图像处理的课太难熬了 <i class="fa-solid fa-face-fearful"></i></p><img lazyload src="/images/loading.svg" data-src="/2024/03/11/%E4%B9%85%E8%BF%9D%E7%9A%84%E6%94%BE%E6%99%B4/6031710146601_.pic_hd.jpg" class title="6031710146601_.pic_hd">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;i class=&quot;fa-solid fa-location-dot&quot;&gt;&lt;/i&gt; Location: Wucheng campus of Shanxi University, Taiyuan, China&lt;/p&gt;
&lt;p&gt;Date: 2024-03-11&lt;/p&gt;
&lt;p&gt;Moo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>xv6 file system</title>
    <link href="https://gme-hong.github.io/2024/01/13/xv6-file-system/"/>
    <id>https://gme-hong.github.io/2024/01/13/xv6-file-system/</id>
    <published>2024-01-13T14:00:51.000Z</published>
    <updated>2024-04-22T06:30:39.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lab5-文件系统"><a href="#Lab5-文件系统" class="headerlink" title="Lab5 文件系统"></a>Lab5 文件系统</h2><h3 id="1-文件系统"><a href="#1-文件系统" class="headerlink" title="1.文件系统"></a>1.文件系统</h3><h4 id="1-1-一些经典的文件系统"><a href="#1-1-一些经典的文件系统" class="headerlink" title="1.1.一些经典的文件系统"></a>1.1.一些经典的文件系统</h4><ol><li><strong>FAT文件系统（File Allocation Table）：</strong> FAT是一种简单而广泛使用的文件系统，最初用于MS-DOS和Windows操作系统。它具有相对简单的结构，容易实现和维护，但在处理大容量存储和提供高级功能方面存在一些限制。</li><li>NTFS（New Technology File System）： NTFS是由Microsoft开发的高性能文件系统，用于Windows NT及其后续版本。它支持更大的文件和分区大小，具有更先进的权限管理、日志记录和元数据特性。</li><li><strong>ext文件系统：</strong><ul><li><strong>ext2：</strong> 是Linux中早期版本使用的文件系统，具有相对简单的结构，不支持日志。</li><li><strong>ext3：</strong> 在ext2的基础上添加了日志功能，提供了更好的稳定性和可靠性。</li><li>ext4：是ext3的后继者，引入了一些性能改进和新特性，支持更大的文件和分区。</li></ul></li><li><strong>HFS和HFS+（Hierarchical File System）：</strong> HFS是由苹果公司用于Macintosh计算机的文件系统。HFS+是其后续版本，引入了更大的文件和卷支持，以及更先进的特性。</li><li><strong>APFS（Apple File System）：</strong>是由苹果公司设计和推出的现代文件系统，用于替代HFS+（Hierarchical File System Plus），并首次引入于macOS High Sierra（10.13）操作系统。</li></ol><h4 id="1-2-xv6fs-文件系统"><a href="#1-2-xv6fs-文件系统" class="headerlink" title="1.2.xv6fs 文件系统"></a>1.2.xv6fs 文件系统</h4><p>今天我们的主角是xv6fs，是一个教学用途的<strong>类 Unix 操作系统</strong>，设计简单，方便学生学习和理解操作系统的基本原理。</p><p>在 xv6 中，文件系统负责管理文件和存储设备上的数据。xv6 使用的文件系统是基于简化的 Unix 文件系统的，包括基本的文件和目录操作、inode 结构等。</p><p>xv6磁盘文件系统的分区图如下：</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041545.png" class title="image-20240113154758144"><h5 id="1-2-1-boot（引导块）"><a href="#1-2-1-boot（引导块）" class="headerlink" title="1.2.1.boot（引导块）"></a>1.2.1.boot（引导块）</h5><p>Lab2 中学过，这里就不再论述了。</p><h5 id="1-2-2-superblock（超级块）"><a href="#1-2-2-superblock（超级块）" class="headerlink" title="1.2.2.superblock（超级块）"></a>1.2.2.superblock（超级块）</h5><p>存有文件系统的<strong>元信息</strong></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fs.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">superblock</span> &#123;</span></span><br><span class="line">  uint size;         <span class="comment">// 文件系统大小，也就是一共多少块</span></span><br><span class="line">  uint nblocks;      <span class="comment">// 数据块数量</span></span><br><span class="line">  uint ninodes;      <span class="comment">// i结点数量</span></span><br><span class="line">  uint nlog;         <span class="comment">// 日志块数量  </span></span><br><span class="line">  uint logstart;     <span class="comment">// 第一个日志块块号 </span></span><br><span class="line">  uint inodestart;   <span class="comment">// 第一个i结点所在块号</span></span><br><span class="line">  uint bmapstart;    <span class="comment">// 第一个位图块块号</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mkfs.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NINODES 200</span></span><br><span class="line"><span class="comment">// Disk layout:</span></span><br><span class="line"><span class="comment">// [ boot block | sb block | log | inode blocks | free bit map | data blocks ]</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> nbitmap = FSSIZE/(BSIZE*<span class="number">8</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ninodeblocks = NINODES / IPB + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> nlog = LOGSIZE;</span><br><span class="line"><span class="type">int</span> nmeta;    <span class="comment">// Number of meta blocks (boot, sb, nlog, inode, bitmap)</span></span><br><span class="line"><span class="type">int</span> nblocks;  <span class="comment">// Number of data blocks</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fsfd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">superblock</span> <span class="title">sb</span>;</span></span><br><span class="line"><span class="type">char</span> zeroes[BSIZE];</span><br><span class="line">uint freeinode = <span class="number">1</span>;</span><br><span class="line">uint freeblock;</span><br></pre></td></tr></table></figure></div><p>在我们进入xv6系统之后，会输出一段关于超级块<code>sb</code>中存储的信息：</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041546.png" class title="image-20240113165900467"><p>我们可以看到，<u>整个磁盘一共有1000块</u>，<u>其中有941块是用来存储数据的</u>，<u>有200个索引节点，索引项从第32个块磁盘块开始存储</u>，<u>30条日志记录，日志记录从第2个磁盘块开始存储</u>，而<u>位图区从第58个磁盘块开始存储</u>。</p><h5 id="1-2-3-logblock（日志区）"><a href="#1-2-3-logblock（日志区）" class="headerlink" title="1.2.3.logblock（日志区）"></a>1.2.3.logblock（日志区）</h5><p>在 xv6 文件系统中，日志区是指用于事务日志（transaction log）的一部分存储区域。xv6 使用日志来确保文件系统的一致性，尤其是在面临系统崩溃或中断的情况下。<strong>日志区的主要目的是在进行文件系统更新时，首先记录要执行的所有操作，然后将这些操作一次性写入磁盘</strong>。这样，即使在执行过程中系统崩溃，可以通过日志来恢复到一致的状态。</p><h5 id="1-2-4-inode（索引区）"><a href="#1-2-4-inode（索引区）" class="headerlink" title="1.2.4.inode（索引区）"></a>1.2.4.inode（索引区）</h5><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041547.png" class title="image-20240113161746995"><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041548.png" class title="image-20240113161804816"><blockquote><p>我们现在想想，这个索引可能会存在的位置？</p></blockquote><ul><li>没错，肯定会在磁盘中出现，因为要在磁盘中组织这些文件，因此磁盘中一定会包含文件索引信息</li><li>那么还有可能就是在内存中了，因为进程对文件进行操作都是在内存中进行的，因此内存中必然包含文件的索引信息。</li></ul><p>那么，我们现在讨论的索引区，准确来说是在磁盘中的索引。为了和内存中的索引相区分，我们将磁盘中的索引称为dinode（disk inode）。</p><p>在<code>fs.h</code>中包含对dinode的Definition：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fs.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NDIRECT 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NINDIRECT (BSIZE / sizeof(uint))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXFILE (NDIRECT + NINDIRECT)</span></span><br><span class="line"><span class="comment">// On-disk inode structure</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dinode</span> &#123;</span></span><br><span class="line">  <span class="type">short</span> type;           <span class="comment">// File type</span></span><br><span class="line">  <span class="type">short</span> major;          <span class="comment">// Major device number (T_DEV only)</span></span><br><span class="line">  <span class="type">short</span> minor;          <span class="comment">// Minor device number (T_DEV only)</span></span><br><span class="line">  <span class="type">short</span> nlink;          <span class="comment">// Number of links to inode in file system</span></span><br><span class="line">  uint size;            <span class="comment">// Size of file (bytes)</span></span><br><span class="line">  uint addrs[NDIRECT+<span class="number">1</span>];   <span class="comment">// Data block addresses</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><ol><li><strong><code>type</code>：</strong> 短整型（<code>short</code>），表示文件的类型。可能的取值包括：<ul><li><code>T_DIR</code>：目录</li><li><code>T_FILE</code>：普通文件</li><li><code>T_DEV</code>：设备文件</li></ul></li><li><strong><code>major</code>：</strong> 短整型（<code>short</code>），仅在文件类型为设备文件（<code>T_DEV</code>）时有意义，表示主设备号。</li><li><strong><code>minor</code>：</strong> 短整型（<code>short</code>），仅在文件类型为设备文件（<code>T_DEV</code>）时有意义，表示次设备号。</li><li><strong><code>nlink</code>：</strong> 短整型（<code>short</code>），表示指向该 inode 的<strong>硬链接数</strong>。</li><li><strong><code>size</code>：</strong> 无符号整型（<code>uint</code>），表示<u>文件的大小</u>（以字节为单位）。</li><li><strong><code>addrs[NDIRECT+1]</code>：</strong> 无符号整型数组，用于存储<strong>文件数据块的地址</strong>。<code>NDIRECT</code> 是一个常量，表示<strong>直接数据块的个数</strong>。这个数组包含了<strong>直接数据块和一级间接数据块的地址</strong>。如果文件很小，数据块地址可以直接存储在 <code>addrs</code> 数组中；<strong>如果文件较大，会使用一级间接块来存储更多的数据块地址</strong>。</li></ol><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041549.png" class title="image-20240113162842066"><p>了解了dinode，我们趁热打铁，继续了解内存中的inode。</p><p>内存中的inode被一个叫<code>icache</code>的结构所组织，在<code>fs.c</code>中进行定义：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fs.c</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">spinlock</span> <span class="title">lock</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> <span class="title">inode</span>[<span class="title">NINODE</span>];</span></span><br><span class="line">&#125; icache;</span><br></pre></td></tr></table></figure></div><ol><li><strong><code>struct spinlock lock</code>：</strong> 自旋锁，用于对整个 <code>icache</code> 结构进行加锁。由于 inode 缓存是一个共享的数据结构，多个线程同时访问时需要使用锁来保护共享资源的一致性。</li><li><strong><code>struct inode inode[NINODE]</code>：</strong><font color="orange"><font color="orange">inode数组</font></font> ，包含了 NINODE 个 <code>struct inode</code> 结构体。<code>NINODE</code> 是一个常量，表示 inode 缓存中可以缓存的 inode 的数量。每个 <code>struct inode</code> 表示一个文件或目录的元数据信息，包括文件类型、大小、指向数据块的地址等。</li></ol><p>在<code>file.h</code>中对inode进行定义：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file.h</span></span><br><span class="line"><span class="comment">// in-memory copy of an inode</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> &#123;</span></span><br><span class="line">  uint dev;           <span class="comment">// Device number</span></span><br><span class="line">  uint inum;          <span class="comment">// Inode number</span></span><br><span class="line">  <span class="type">int</span> ref;            <span class="comment">// Reference count</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sleeplock</span> <span class="title">lock</span>;</span> <span class="comment">// protects everything below here</span></span><br><span class="line">  <span class="type">int</span> valid;          <span class="comment">// inode has been read from disk?</span></span><br><span class="line"></span><br><span class="line">  <span class="type">short</span> type;         <span class="comment">// copy of disk inode</span></span><br><span class="line">  <span class="type">short</span> major;</span><br><span class="line">  <span class="type">short</span> minor;</span><br><span class="line">  <span class="type">short</span> nlink;</span><br><span class="line">  uint size;</span><br><span class="line">  uint addrs[NDIRECT+<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>我们可以看到，除了有跟dinode一致的数据项之外，还有一些额外数据项：</p><ol><li><strong><code>uint dev</code>：</strong> 无符号整型（<code>uint</code>），表示该 inode 所在的设备的设备号。</li><li><strong><code>uint inum</code>：</strong> 无符号整型（<code>uint</code>），<strong>表示该 inode 的编号，即该 inode 在设备上的唯一标识符</strong>。</li><li><strong><code>int ref</code>：</strong> 整型（<code>int</code>），表示<strong>对该 inode 的引用计数</strong>。引用计数用于跟踪有多少个指针（例如，打开文件描述符）引用了这个 inode。<font color="cornflowerblue">当引用计数为零时，inode 可以被释放</font>。</li><li><strong><code>struct sleeplock lock</code>：</strong> 一个睡眠锁（sleeping lock），用于保护 <code>struct inode</code> 中除了 <code>lock</code> 自身之外的其他字段。睡眠锁是一种同步机制，它允许线程在访问被锁定资源时进入睡眠状态。</li><li><strong><code>int valid</code>：</strong> 整型（<code>int</code>），表示该 inode 是否已经从磁盘读取并被标记为有效。当 <code>valid</code> 为 1 时，表示该 inode 包含的信息已经被读取到内存中。</li></ol><hr><h6 id="Ex5-1-请解释为-icache-添加的锁-与-为-inode-添加的锁不同的原因？"><a href="#Ex5-1-请解释为-icache-添加的锁-与-为-inode-添加的锁不同的原因？" class="headerlink" title="Ex5-1 请解释为 icache 添加的锁 与 为 inode 添加的锁不同的原因？"></a>Ex5-1 请解释为 icache 添加的锁 与 为 inode 添加的锁不同的原因？</h6><hr><h5 id="1-2-5-bitmap（位图区）"><a href="#1-2-5-bitmap（位图区）" class="headerlink" title="1.2.5.bitmap（位图区）"></a>1.2.5.bitmap（位图区）</h5><p>在理论课中，我们学过，位图是一种磁盘空间管理的方案。</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041550.png" class title="image-20240113165302182"><p>这里补充一个大家容易误解的知识点：数据块的分配和释放由位图来管理，但位图管理的区域不止数据区，而是<strong>整个文件系统</strong>。</p><p>位图块中每一位都代表着<strong>一块</strong>，该位置 <strong>1 表示相应的块正在使用</strong>，该位置 <strong>0 表示相应的块空闲</strong>。</p><h5 id="1-2-6-data（数据区）"><a href="#1-2-6-data（数据区）" class="headerlink" title="1.2.6.data（数据区）"></a>1.2.6.data（数据区）</h5><p>数据区没啥好说的，只要记住一个点：以块为单位进行存储，可能会产生块内碎片；数据区的存储由位图区进行管理。</p><p>到这里，我们就能对单个文件的检索过程有一个清晰的认知：</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041551.png" class title="image-20240113175030759"><blockquote><p>除了上述一些在磁盘分区中直接体现的结构之外，文件系统还有一些重要的结构需要我们去了解。</p></blockquote><hr><blockquote><p>我们先试想一下，索引极大的方便了数据块的查找，但其依然是对于文件系统内部而言的。我们平常去检索一个文件从来没有说，通过索引项去找到该文件的吧。相反，我们总是通过文件的文件名去检索文件。因此，还必须有一个结构去实现这种 ”按名存取“ 的功能。这就是目录！</p></blockquote><h5 id="1-2-7-directory（目录）"><a href="#1-2-7-directory（目录）" class="headerlink" title="1.2.7.directory（目录）"></a>1.2.7.directory（目录）</h5><p>在xv6中，跟目录有关的结构体被定义在<code>fs.h</code>中：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fs.h</span></span><br><span class="line"><span class="comment">// Directory is a file containing a sequence of dirent structures.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DIRSIZ 14</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> &#123;</span></span><br><span class="line">  ushort inum;</span><br><span class="line">  <span class="type">char</span> name[DIRSIZ];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><ol><li><code>ushort inum</code>：无符号短整型，<strong>表示该目录项对应的 inode 号</strong>。</li><li><code>char name[DIRSIZ]</code>：字符数组，表示目录项的名字。<code>DIRSIZ</code> 是一个常量，表示目录项名字的最大长度。</li></ol><p>其中，每一个dirent结构体被称为目录项。在 xv6 操作系统中，目录项存储在磁盘的<strong>数据块</strong>中。每个目录都有一个对应的 inode，而目录项信息实际上被存储在该目录的数据块中。这个数据块包含了一系列的目录项，每个目录项都表示一个文件或子目录。</p><p>我们在xv6的终端中输入<code>ls</code>命令，既可以看到根目录的目录结构：</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041552.png" class title="image-20240113172648618"><p>我们使用xv6提供的终端命令<code>mkdir</code>自己创建一个目录<code>mydir</code>，再在改目录下通过<code>echo</code>命令创建两个文件</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041553.png" class title="image-20240113173057913"><p>之后我们在使用<code>ls</code>命令查看根目录的结构</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041554.png" class title="image-20240113173116276"><p>我们来解释一下<code>ls</code>输出的内容：</p><ul><li>第一列表示文件名，其中“.”表示本目录，”..“表示父目录（根目录的父目录就是其自身）</li></ul><style>.wdqkevnvqsbu{zoom:50%;}</style><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041555.png" class="wdqkevnvqsbu" alt="image-20240113173229906"><ul><li>第二列表示文件类别，我们知道，在Unix操作系统中，”一切皆文件“的思想，在<code>stat.h</code>中，给出了三种文件类型：</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> T_DIR  1   <span class="comment">// Directory</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> T_FILE 2   <span class="comment">// File</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> T_DEV  3   <span class="comment">// Device</span></span></span><br></pre></td></tr></table></figure></div><p>其中1表示目录文件，2表示数据文件，3表示设备文件。</p><p>我们可以看到“.”和”..“以及我们创建的“mydir”都是目录文件，而console是设备文件</p><ul><li>第三列表示inode编号，这是直接在目录项中存在的，其数值必然是唯一的。</li><li>第四列表示文件的大小，这是在目录项中没有的，因此我们可以推断，<code>ls</code>命令应该既访问了目录项，又访问了inode结点。</li></ul><p>很显然，这种目录的组织结构就是我们熟知的树型结构</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041556.png" class title="image-20240113172607369"><p>那么，假如我们要检索创建的“myfile1”文件，就需要按照树型结构的路径一层层往下找。当然，不同的起始出发点就会出现两种寻找策略：直接从根节点出发寻找和从当前目录项出发寻找。但是不管是哪一种策略，其都是一个递归的过程。</p><hr><blockquote><p>到这里，我们都还是介绍一些”共性“的结构，或者说概念。但是每一个文件肯定是不同，我们还需要一种能体现”特性“的结构体来表示每一个文件。</p></blockquote><h5 id="1-2-8-file（文件结构体）"><a href="#1-2-8-file（文件结构体）" class="headerlink" title="1.2.8.file（文件结构体）"></a>1.2.8.file（文件结构体）</h5><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> &#123;</span> FD_NONE, FD_PIPE, FD_INODE &#125; type;</span><br><span class="line">  <span class="type">int</span> ref; <span class="comment">// 引用计数</span></span><br><span class="line">  <span class="type">char</span> readable; <span class="comment">// 文件是否可读</span></span><br><span class="line">  <span class="type">char</span> writable; <span class="comment">// 文件是否可写</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">pipe</span>;</span> <span class="comment">// 管道文件</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">ip</span>;</span> <span class="comment">// 关联的 inode</span></span><br><span class="line">  uint off; <span class="comment">// 读写位置</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><ol><li><strong><code>num &#123; FD_NONE, FD_PIPE, FD_INODE &#125; type</code>：</strong> 表示文件类型的枚举。文件可以是普通文件（<code>FD_INODE</code>）、管道文件（<code>FD_PIPE</code>）或者无效的文件（<code>FD_NONE</code>）。</li><li><strong><code>int ref</code>：</strong> 引用计数，用于追踪有多少个文件描述符引用了这个文件。引用计数用于文件的释放，当引用计数为零时，文件可以被释放。</li><li><strong><code>char readable</code> 和 <code>char writable</code>：</strong> 标志文件是否可读和可写。这两个字段表示了文件的访问权限。</li><li><strong><code>struct pipe \*pipe</code>：</strong> 如果文件是管道文件，这个字段指向管道结构体。</li><li><strong><code>struct inode \*ip</code>：</strong> 指向文件关联的 inode 结构体，用于获取文件的元数据信息。</li><li><strong><code>uint off</code>：</strong> 当前文件的读写位置，表示下一次读写操作将在文件中的哪个位置发生。</li></ol><hr><blockquote><p>接下来我们还得再了解一个概念：文件描述符，这是在<strong>进程</strong>中直接使用的一个结构。</p></blockquote><h5 id="1-2-9-文件描述符"><a href="#1-2-9-文件描述符" class="headerlink" title="1.2.9.文件描述符"></a>1.2.9.文件描述符</h5><p>进程使用文件并不使用file结构体或inode结构体，而是提供文件的路径名来打开文件并获得文件描述符，后续将使用文件描述符来指代这个打开的文件。xv6中，每个进程都有一个文件描述符表<code>proc-&gt;ofile[]</code>，最多可以使用NOFILE&#x3D;16个文件描述符（也就是说一个进程最多同时打开16个文件），每个文件描述符都直接指向一个file结构体（系统管理的已打开的文件）。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//proc.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Per-process state</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proc</span> &#123;</span></span><br><span class="line">...</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">ofile</span>[<span class="title">NOFILE</span>];</span>  <span class="comment">// Open files</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">cwd</span>;</span>           <span class="comment">// Current directory</span></span><br><span class="line">  <span class="type">char</span> name[<span class="number">16</span>];               <span class="comment">// Process name (debugging)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>现在，我们可以站在整个文件系统的层次对一个进程访问文件的整个过程有一个宏观的认知：</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041557.png" class title="image-20240113181318963"><h3 id="2-文件系统操作"><a href="#2-文件系统操作" class="headerlink" title="2.文件系统操作"></a>2.文件系统操作</h3><h4 id="2-1-盘块操作"><a href="#2-1-盘块操作" class="headerlink" title="2.1.盘块操作"></a>2.1.盘块操作</h4><p><strong>文件系统的所有操作中，对盘块的操作是最底层的，是直接和硬件（设备驱动程序）打交道的。</strong></p><p>在介绍盘块操作之前，我必须先指出大家可能模棱两可的问题：</p><p><font color="red">对盘块的操作并不是直接在磁盘中对盘块进行操作，而是对映射到内存中的块缓存进行操作</font>，至于原因，我觉得大家都明白。<font color="orange">对一个盘块的多次读写操作都是在内存中完成的，直到换出到磁盘上才真正地执行写盘操作</font>。</p><p>xv6fs只能通过块缓存来访问磁盘，而不允许直接访问。</p><h5 id="2-1-1-盘块缓冲区"><a href="#2-1-1-盘块缓冲区" class="headerlink" title="2.1.1.盘块缓冲区"></a>2.1.1.盘块缓冲区</h5><p>在xv6的<code>buf.c</code>中有对缓冲区的定义：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//buf.c</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">spinlock</span> <span class="title">lock</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> <span class="title">buf</span>[<span class="title">NBUF</span>];</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Linked list of all buffers, through prev/next.</span></span><br><span class="line">  <span class="comment">// head.next is most recently used.</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> <span class="title">head</span>;</span></span><br><span class="line">&#125; bcache;</span><br></pre></td></tr></table></figure></div><ol><li><strong><code>struct spinlock lock</code>：</strong> 互斥锁，用于对整个缓冲区缓存进行加锁。由于缓冲区缓存是一个共享的数据结构，多个线程同时访问时需要使用锁来保护共享资源的一致性。</li><li><strong><code>struct buf buf[NBUF]</code>：</strong> 缓冲区数组，包含 NBUF 个 <code>struct buf</code> 结构体。每个元素表示一个缓冲区，用于缓存磁盘上的数据块。</li><li><strong><code>struct buf head</code>：</strong> <code>struct buf</code> 结构体，用作链表的头部。通过 <code>head.next</code> 和 <code>head.prev</code> 可以构建一个双向链表，用于管理所有缓冲区。<code>head.next</code> 指向最近使用的缓冲区，<code>head.prev</code> 指向最久未使用的缓冲区。</li></ol><p>对每一个缓冲单元在<code>buf.h</code>中进行定义：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//buf.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buf</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> flags;</span><br><span class="line">  uint dev;</span><br><span class="line">  uint blockno;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sleeplock</span> <span class="title">lock</span>;</span></span><br><span class="line">  uint refcnt;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">prev</span>;</span> <span class="comment">// LRU cache list</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">qnext</span>;</span> <span class="comment">// disk queue</span></span><br><span class="line">  uchar data[BSIZE];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B_VALID 0x2  <span class="comment">// buffer has been read from disk</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B_DIRTY 0x4  <span class="comment">// buffer needs to be written to disk</span></span></span><br></pre></td></tr></table></figure></div><ol><li><strong><code>int flags</code>：</strong> 整型，用于表示缓冲区的状态标志。这些标志可能包括：<ul><li><code>B_VALID</code>：缓冲区包含有效的数据。</li><li><code>B_DIRTY</code>：缓冲区中的数据已经被修改，需要写回磁盘。</li><li>其他标志用于表示缓冲区的状态。</li></ul></li><li><strong><code>uint dev</code>：</strong> 无符号整型，表示数据块所在的设备的设备号。</li><li><strong><code>uint blockno</code>：</strong> 无符号整型，表示数据块的块号。这是指在设备上的位置。</li><li><strong><code>struct sleeplock lock</code>：</strong> 一个睡眠锁（sleeping lock），用于对缓冲区进行加锁。睡眠锁是一种同步机制，它允许线程在访问被锁定资源时进入睡眠状态。</li><li><strong><code>uint refcnt</code>：</strong> 无符号整型，表示缓冲区的引用计数。<strong>引用计数用于跟踪有多少个指针引用了这个缓冲区。当引用计数为零时，缓冲区可以被释放。</strong></li><li><strong><code>struct buf *prev</code> 和 <code>struct buf *next</code>：</strong> 指向双向链表中前一个和后一个缓冲区的指针。这些指针用于在缓冲区之间构建 <strong>LRU（Least Recently Used）缓存列表</strong>，<strong>以实现缓冲区的管理和替换</strong>。</li><li><strong><code>struct buf *qnext</code>：</strong> 指向缓冲区的下一个缓冲区，用于构建磁盘 I&#x2F;O 队列。这个指针用于将缓冲区连接到待写回磁盘的队列中。</li><li><strong><code>uchar data[BSIZE]</code>：</strong> 字节数组，用于存储实际的数据块。<code>BSIZE</code> 是一个常量，表示数据块的大小。</li></ol><h5 id="2-1-2-初始化"><a href="#2-1-2-初始化" class="headerlink" title="2.1.2.初始化"></a>2.1.2.初始化</h5><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">  binit();         <span class="comment">// buffer cache</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bio.c</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">binit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">b</span>;</span></span><br><span class="line">  initlock(&amp;bcache.lock, <span class="string">&quot;bcache&quot;</span>);</span><br><span class="line"><span class="comment">//PAGEBREAK!</span></span><br><span class="line">  <span class="comment">// Create linked list of buffers</span></span><br><span class="line">  bcache.head.prev = &amp;bcache.head;</span><br><span class="line">  bcache.head.next = &amp;bcache.hfead;</span><br><span class="line">  <span class="keyword">for</span>(b = bcache.buf; b &lt; bcache.buf+NBUF; b++)&#123;</span><br><span class="line">    b-&gt;next = bcache.head.next;</span><br><span class="line">    b-&gt;prev = &amp;bcache.head;</span><br><span class="line">    initsleeplock(&amp;b-&gt;lock, <span class="string">&quot;buffer&quot;</span>);</span><br><span class="line">    bcache.head.next-&gt;prev = b;</span><br><span class="line">    bcache.head.next = b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>初始化就干两件事：</p><ol><li>创建bcache自旋锁</li><li>将缓存块buf构成一个LRU双向链表</li></ol><p>希望同学们不要把大部分精力陷入到代码的具体理解中，这没意义！</p><h5 id="2-1-3-查找"><a href="#2-1-3-查找" class="headerlink" title="2.1.3.查找"></a>2.1.3.查找</h5><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bio.c</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> buf*</span><br><span class="line"><span class="title function_">bget</span><span class="params">(uint dev, uint blockno)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">b</span>;</span></span><br><span class="line"></span><br><span class="line">  acquire(&amp;bcache.lock);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Is the block already cached?</span></span><br><span class="line">  <span class="keyword">for</span>(b = bcache.head.next; b != &amp;bcache.head; b = b-&gt;next)&#123;</span><br><span class="line">    <span class="keyword">if</span>(b-&gt;dev == dev &amp;&amp; b-&gt;blockno == blockno)&#123;</span><br><span class="line">      b-&gt;refcnt++;</span><br><span class="line">      release(&amp;bcache.lock);</span><br><span class="line">      acquiresleep(&amp;b-&gt;lock);</span><br><span class="line">      <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Not cached; recycle an unused buffer.</span></span><br><span class="line">  <span class="comment">// Even if refcnt==0, B_DIRTY indicates a buffer is in use</span></span><br><span class="line">  <span class="comment">// because log.c has modified it but not yet committed it.</span></span><br><span class="line">  <span class="keyword">for</span>(b = bcache.head.prev; b != &amp;bcache.head; b = b-&gt;prev)&#123;</span><br><span class="line">    <span class="keyword">if</span>(b-&gt;refcnt == <span class="number">0</span> &amp;&amp; (b-&gt;flags &amp; B_DIRTY) == <span class="number">0</span>) &#123;</span><br><span class="line">      b-&gt;dev = dev;</span><br><span class="line">      b-&gt;blockno = blockno;</span><br><span class="line">      b-&gt;flags = <span class="number">0</span>;</span><br><span class="line">      b-&gt;refcnt = <span class="number">1</span>;</span><br><span class="line">      release(&amp;bcache.lock);</span><br><span class="line">      acquiresleep(&amp;b-&gt;lock);</span><br><span class="line">      <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  panic(<span class="string">&quot;bget: no buffers&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>根据设备号和盘块号查找块缓存。需要注意的是，盘块缓冲区是对磁盘空间进行了抽象，抽象成了一个连续的空间。而对磁盘缓冲块的查找也相当的粗暴，直接for循环遍历！</p><h5 id="2-1-4-释放"><a href="#2-1-4-释放" class="headerlink" title="2.1.4.释放"></a>2.1.4.释放</h5><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bio.c</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">brelse</span><span class="params">(<span class="keyword">struct</span> buf *b)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(!holdingsleep(&amp;b-&gt;lock))</span><br><span class="line">    panic(<span class="string">&quot;brelse&quot;</span>);</span><br><span class="line"></span><br><span class="line">  releasesleep(&amp;b-&gt;lock);</span><br><span class="line"></span><br><span class="line">  acquire(&amp;bcache.lock);</span><br><span class="line">  b-&gt;refcnt--;</span><br><span class="line">  <span class="keyword">if</span> (b-&gt;refcnt == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// no one is waiting for it.</span></span><br><span class="line">    b-&gt;next-&gt;prev = b-&gt;prev;</span><br><span class="line">    b-&gt;prev-&gt;next = b-&gt;next;</span><br><span class="line">    b-&gt;next = bcache.head.next;</span><br><span class="line">    b-&gt;prev = &amp;bcache.head;</span><br><span class="line">    bcache.head.next-&gt;prev = b;</span><br><span class="line">    bcache.head.next = b;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  release(&amp;bcache.lock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//PAGEBREAK!</span></span><br><span class="line"><span class="comment">// Blank page.</span></span><br></pre></td></tr></table></figure></div><p>释放的代码很简单，需要注意的就是进行<code>b-&gt;refcnt--;</code>操作。</p><hr><p><font color="red">后续还有很多函数，考虑到文章的篇幅，这里我们不再贴代码，会指明代码所在的文件，同学们自行查找即可！</font></p><hr><h5 id="2-1-5-盘块的读写"><a href="#2-1-5-盘块的读写" class="headerlink" title="2.1.5.盘块的读写"></a>2.1.5.盘块的读写</h5><p>请注意，<font color="orange">盘块的读写指的都是从缓存块和磁盘块直接交互的过程！</font></p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041558.png" class title="image-20240113185835790"><p>读写函数都定义在<code>bio.c</code>中，<code>bread()</code>先调用<code>bget()</code>查找对应的缓存块，然后调用<code>iderw()</code>将数据块从磁盘中写入缓存区中；而bwrite()就是调用<code>iderw()</code>将数据块写回磁盘。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> buf*</span><br><span class="line"><span class="title function_">bread</span><span class="params">(uint dev, uint blockno)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">b</span>;</span></span><br><span class="line"></span><br><span class="line">  b = bget(dev, blockno);</span><br><span class="line">  <span class="keyword">if</span>((b-&gt;flags &amp; B_VALID) == <span class="number">0</span>) &#123;</span><br><span class="line">    iderw(b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>这个读函数还是给大家贴出来，因为后面做实验要用到。</p></blockquote><h5 id="2-1-6-读入超级块"><a href="#2-1-6-读入超级块" class="headerlink" title="2.1.6.读入超级块"></a>2.1.6.读入超级块</h5><p>超级块的读入有点特殊（很正常，人家名字就已经很特殊了），有专门的在<code>fs.c</code>中的<code>readsb()</code>。</p><blockquote><p>嘿嘿，要不同学猜猜，为什么要抽离出来，定义一个专门的函数来读这个盘块？</p></blockquote><hr><h6 id="Ex5-2-请解释为什么要单独定义一个超级块的读入函数？"><a href="#Ex5-2-请解释为什么要单独定义一个超级块的读入函数？" class="headerlink" title="Ex5-2 请解释为什么要单独定义一个超级块的读入函数？"></a>Ex5-2 请解释为什么要单独定义一个超级块的读入函数？</h6><hr><blockquote><p>骚微提示一下，同学们想想这个盘块是在什么时候开始读的，哈哈哈，只能提示这么多了。</p></blockquote><h5 id="2-1-7-其他函数"><a href="#2-1-7-其他函数" class="headerlink" title="2.1.7.其他函数"></a>2.1.7.其他函数</h5><p>还有几个比较重要的函数是<code>bzero</code>、<code>balloc</code>、<code>bfree</code>，具体干嘛的，同学们自行查阅相关资料。</p><h4 id="2-2-索引节点操作"><a href="#2-2-索引节点操作" class="headerlink" title="2.2.索引节点操作"></a>2.2.索引节点操作</h4><p>对索引节点的操作是抽象在对磁盘操作的基础之上的，具体有对索引节点管理的文件的读写，以及对节点自身的分配，删除和修改。</p><h5 id="2-1-1-对索引节点自身的操作"><a href="#2-1-1-对索引节点自身的操作" class="headerlink" title="2.1.1.对索引节点自身的操作"></a>2.1.1.对索引节点自身的操作</h5><p>主要的函数有<code>iget</code>、<code>iupdate</code>、<code>idup</code>、<code>itrunc</code>、<code>stati</code>、<code>ilock</code>、<code>iunlock</code>、<code>iput</code>，都在<code>fs.c</code>中。</p><p><code>iget()</code>根据设备号dev和索引节点inum在索引节点缓存中查找，返回所匹配的索引节点缓存，或者分配一个空闲的索引节点缓存。</p><p><code>iupdate()</code>将inode缓存的内容更新到磁盘的dinode上，最后写回磁盘中。</p><p><code>idup()</code>增加索引节点缓存的引用计数，将其成员变量ref++即可。</p><p><code>itrunc()</code>将索引节点管理的文件数据（直接块和间接块）都释放掉，每个盘块通过<code>bfree()</code>释放</p><p><code>stati()</code>将索引节点缓存中的基本信息复制到stat结构体中并返回。</p><p><code>iput()</code>减少索引节点缓存的引用计数，将其成员变量ref–，若小于0则<code>itrunc</code>。</p><h5 id="2-1-2-对文件的操作"><a href="#2-1-2-对文件的操作" class="headerlink" title="2.1.2.对文件的操作"></a>2.1.2.对文件的操作</h5><p>主要的函数有<code>readi</code>、<code>bmap</code>、<code>writei</code>，都在<code>fs.c</code>中。</p><p><code>readi()</code></p><p>用于从 inode 对应的磁盘文件的偏移 off 处，读入n个字节到 dst 指向的数据缓冲区。如果是设备文件(T_DEV)，则使用设备的读操作函数 devsw[ip-&gt;major]。read()完成读入操作,否则将执行磁盘文件的读入操作,该操作略微有些复杂。</p><p><strong>磁盘文件需要逐个盘块读入数据,但首先要知道文件偏移量对应的物理盘块号是哪个,这是通过 bmap()完成的。</strong></p><p>确定盘块号之后,将会调用前面讨论过的 bread()完成磁盘盘块的读人。由于 bread()将数据读入到块缓存中,因此还需要用 memmove()将数据复制到用户空间缓冲区。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">readi</span><span class="params">(<span class="keyword">struct</span> inode *ip, <span class="type">char</span> *dst, uint off, uint n)</span></span><br><span class="line">&#123;</span><br><span class="line">  uint tot, m;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">bp</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(ip-&gt;type == T_DEV)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ip-&gt;major &lt; <span class="number">0</span> || ip-&gt;major &gt;= NDEV || !devsw[ip-&gt;major].read)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> devsw[ip-&gt;major].read(ip, dst, n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(off &gt; ip-&gt;size || off + n &lt; off)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(off + n &gt; ip-&gt;size)</span><br><span class="line">    n = ip-&gt;size - off;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(tot=<span class="number">0</span>; tot&lt;n; tot+=m, off+=m, dst+=m)&#123;</span><br><span class="line">    bp = bread(ip-&gt;dev, bmap(ip, off/BSIZE));</span><br><span class="line">    m = min(n - tot, BSIZE - off%BSIZE);</span><br><span class="line">    memmove(dst, bp-&gt;data + off%BSIZE, m);</span><br><span class="line">    brelse(bp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>这个读函数还是给大家贴出来，因为后面做实验要用到。</p></blockquote><p><code>bmap()</code><br>由于进程发出的文件读写操作使用的是字节偏移(转换成文件内部的逻辑盘块号bn)，而磁盘读写 bread()和 bwrite()使用的是物理盘块号，因此需要 bmap()将文件字节偏移对应的逻辑盘块号 bn 转换成物理盘块号。其转换过程需要借助索引节点的 dinode.addrs[]或 inode.addrs[]，并且需要考虑直接盘块和间接盘块。</p><p>如果对应的数据盘块不存在,则 bmap() 会调用 balloc() 分配一个空闲盘块,然后再修改索引，使得 ip-&gt;addrs[bn] 指向新分配的盘块；如果该偏移落人间接索引区,则可能还需要分配间接索引盘块,然后才能分配盘块号bn所对应的数据盘块并建立索引关系。</p><p><code>writei()</code><br>writei()需要逐个盘块写出数据,因为有块缓存的存在,其会先调用 bread()将磁盘盘块读入到块缓存，然后才是将数据复制到块缓存中，最后由 log_write()向日志系统写出。writei()也是借用 bmap()，通过查找 dinode.addrs[]完成文件偏移量到磁盘盘块号的转换。</p><p>如果是设备(T_DEV),则需要通过它自身的读函数 devsw[ip-&gt;major].read 完成。</p><h4 id="2-3-目录操作"><a href="#2-3-目录操作" class="headerlink" title="2.3.目录操作"></a>2.3.目录操作</h4><p>这一部分我们直接略过了，其主要函数都在<code>fs.c</code>中，如用于目录查找的函数：<code>dirlookup</code>、<code>skipelem</code>；用于创建和删除的函数：<code>dirlink</code>；用于文件定位的函数：<code>namex</code>、<code>namei</code>、<code>nameiparent</code>，其均在<code>fs.c</code>中实现。</p><h4 id="2-4-文件操作"><a href="#2-4-文件操作" class="headerlink" title="2.4.文件操作"></a>2.4.文件操作</h4><h5 id="2-4-1-文件打开表初始化"><a href="#2-4-1-文件打开表初始化" class="headerlink" title="2.4.1.文件打开表初始化"></a>2.4.1.文件打开表初始化</h5><p>在<code>file.c</code>中有<code>fileinit</code>的定义：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file.c</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">fileinit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  initlock(&amp;ftable.lock, <span class="string">&quot;ftable&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">  fileinit();      <span class="comment">// file table</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>用于对系统中已打开文件列表ftable[]进行初始化，即初始化ftable.lock自旋锁</p><h5 id="2-4-2-分配、关闭和复制"><a href="#2-4-2-分配、关闭和复制" class="headerlink" title="2.4.2.分配、关闭和复制"></a>2.4.2.分配、关闭和复制</h5><p><code>filealloc</code>分配一个空闲的file对象</p><p><code>filedup</code>当用户进程对某个文件描述符进行复制时，将引起对应的file对象引用次数加一</p><p><code>fileclose</code>类似<code>iput</code></p><p><code>filestat</code>读取文件的元数据</p><h5 id="2-4-3-文件读写操作"><a href="#2-4-3-文件读写操作" class="headerlink" title="2.4.3.文件读写操作"></a>2.4.3.文件读写操作</h5><p><code>fileread()</code>是通用的文件读操作函数，当文件的type为FD_PIPE将调用piperead()进行读，而为FD_INODE时，调用readi()进行读。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file.c</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">fileread</span><span class="params">(<span class="keyword">struct</span> file *f, <span class="type">char</span> *addr, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(f-&gt;readable == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(f-&gt;type == FD_PIPE)</span><br><span class="line">    <span class="keyword">return</span> piperead(f-&gt;pipe, addr, n);</span><br><span class="line">  <span class="keyword">if</span>(f-&gt;type == FD_INODE)&#123;</span><br><span class="line">    ilock(f-&gt;ip);</span><br><span class="line">    <span class="keyword">if</span>((r = readi(f-&gt;ip, addr, f-&gt;off, n)) &gt; <span class="number">0</span>)</span><br><span class="line">      f-&gt;off += r;</span><br><span class="line">    iunlock(f-&gt;ip);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">  &#125;</span><br><span class="line">  panic(<span class="string">&quot;fileread&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>这个读函数还是给大家贴出来，因为后面做实验要用到。</p></blockquote><p><code>filewrite()</code>是通用的文件写操作函数，与读操作类似，也通过type分别调用具体的写函数。</p><h4 id="2-5-系统调用"><a href="#2-5-系统调用" class="headerlink" title="2.5.系统调用"></a>2.5.系统调用</h4><p>系统调用在Lab4中已经讲过，为此我们不再做过多赘述。本节课的系统调用的重点就是关注那些与文件操作相关的系统调用，如<code>sys_open</code>、<code>sys_close</code>、<code>sys_read</code>、<code>sys_write</code>、<code>sys_mkdir</code>、<code>sys_mknod</code>等</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">sys_read</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">f</span>;</span></span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="type">char</span> *p;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(argfd(<span class="number">0</span>, <span class="number">0</span>, &amp;f) &lt; <span class="number">0</span> || argint(<span class="number">2</span>, &amp;n) &lt; <span class="number">0</span> || argptr(<span class="number">1</span>, &amp;p, n) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> fileread(f, p, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>由于我们后面的实验会用到sys_read()，因此各位重点了解一下这个函数。</p><h3 id="3-实验"><a href="#3-实验" class="headerlink" title="3.实验"></a>3.实验</h3><p>文件系统的内容相当庞大，涉及的概念多吗，因此容易弄混是很常见的事。笔者在上理论课的时候也就在这块理解的不是特别丝滑，因为诸位应该秉着从全局到末端的策略，反复理解。</p><p>那么，我们现在结合一个简单的实验，帮助同学们从进程、文件系统（内存到外存）到设备驱动，这整个文件读的操作理解清楚。</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041559.png" class title="image-20240113205721509"><h4 id="3-1-gdbinit配置文件断点设置"><a href="#3-1-gdbinit配置文件断点设置" class="headerlink" title="3.1.gdbinit配置文件断点设置"></a>3.1.gdbinit配置文件断点设置</h4><div class="highlight-container" data-rel="Makefile"><figure class="iseeu highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">layout src</span><br><span class="line"></span><br><span class="line">break sysfile.c:sys_read</span><br><span class="line">break file.c:fileread</span><br><span class="line">break fs.c:readi</span><br><span class="line">break bio.c:bread</span><br><span class="line">break ide.c:iderw</span><br></pre></td></tr></table></figure></div><h4 id="3-2-编译xv6-启动gdb"><a href="#3-2-编译xv6-启动gdb" class="headerlink" title="3.2.编译xv6&amp;启动gdb"></a>3.2.编译xv6&amp;启动gdb</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make qume-nox-gdb</span><br><span class="line">gdb</span><br></pre></td></tr></table></figure></div><h4 id="3-3-具体过程"><a href="#3-3-具体过程" class="headerlink" title="3.3.具体过程"></a>3.3.具体过程</h4><p>Step1：在gdb中：通过info breakpoints检查断点</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041560.png" class title="image-20240113210843772"><p>Step2：取消断点2,3,4,5</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disable <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></div><p>Step3：continue</p><p>在gdb中输入一个c之后，程序执行到第一个断点位置，此时xv6终端呈现如下，但依旧不能输入。</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041561.png" class title="image-20240113211155390"><p>在输入第二个c后，程序进入死循环，此时终端可以使用，即开中断已打开。</p><p>Step4：在xv6中输入<code>cat README</code>，即读README文件，并将内容输出到终端中。</p><p>此时，产生中断，截停在sys_read函数中</p><p>Step5：此时我们在gdb中恢复断点2,3,4,5</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enable <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></div><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041562.png" class title="image-20240113211724588"><p>然后，我们逐行调试，在第78行进入函数fileread中。</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041563.png" class title="image-20240113211913594"><p>再接着逐行调试，会在107行进入readi函数中。</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041564.png" class title="image-20240113212046641"><p>再继续，此时可能会读写多个缓存块。在470行进入bread函数中。</p><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041565.png" class title="image-20240113212320321"><p>最后，通过设备驱动程序读取文件，在103行进入iderw函数中。</p><p>Step7：当你继续c后，直到xv6终端中出现这么一大段字符，就说明已经从磁盘中读取了一个块的内容。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NOTE: we have stopped maintaining the x86 version of xv6, and switched</span><br><span class="line">our efforts to the RISC-V version</span><br><span class="line">(https://github.com/mit-pdos/xv6-riscv.git)</span><br><span class="line"></span><br><span class="line">xv6 is a re-implementation of Dennis Ritchie&#x27;s and Ken Thompson&#x27;s Unix</span><br><span class="line">Version 6 (v6).  xv6 loosely follows the structure and style of v6,</span><br><span class="line">but is implemented for a modern x86-based multiprocessor using ANSI C.</span><br><span class="line"></span><br><span class="line">ACKNOWLEDGMENTS</span><br><span class="line"></span><br><span class="line">xv6 is inspired by John Lions&#x27;s Commentary on UNIX 6th Edition (Peer</span><br><span class="line">to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14</span><br></pre></td></tr></table></figure></div><p>读者可以数一下，这一共多少个字符。如果是512个，那么恭喜，你数对了。字符数就是一个块的大小（512B）。</p><p>当然，读者再继续c几下还会出现更多的内容。我们直到README文件的大小为2286B，那么算下来，读者应该会执行5次c命令才算把这个文件读完。</p><p>Step8：做到这里，基本上这个小实验就算完成了。做完这些，读者应该大致对这个文件读的过程有了一个宏观的了解。至于这个后面，文件名是如何传递的，索引号是如何检索的，读者如果感兴趣，可以自行探索。</p><p>最后，我们再留一个小作业。我们刚带诸位了解了文件读的过程，那么文件写的执行过程是怎样的，请同学们自行实验探索。</p><hr><h5 id="Ex5-3-请分析echo-“0”-mydir-myfile3这条命令的执行过程，要求对执行过程经过的几个关键的写函数进行分析和截图，并绘制如下，关于写过程的流程图。"><a href="#Ex5-3-请分析echo-“0”-mydir-myfile3这条命令的执行过程，要求对执行过程经过的几个关键的写函数进行分析和截图，并绘制如下，关于写过程的流程图。" class="headerlink" title="Ex5-3 请分析echo “0” &gt; /mydir/myfile3这条命令的执行过程，要求对执行过程经过的几个关键的写函数进行分析和截图，并绘制如下，关于写过程的流程图。"></a>Ex5-3 请分析<code>echo “0” &gt; /mydir/myfile3</code>这条命令的执行过程，要求对执行过程经过的几个关键的写函数进行分析和截图，并绘制如下，关于写过程的流程图。</h5><hr><img lazyload src="/images/loading.svg" data-src="/2024/01/13/xv6-file-system/202403110041566-0090632.png" class title="image-20240113213612673">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Lab5-文件系统&quot;&gt;&lt;a href=&quot;#Lab5-文件系统&quot; class=&quot;headerlink&quot; title=&quot;Lab5 文件系统&quot;&gt;&lt;/a&gt;Lab5 文件系统&lt;/h2&gt;&lt;h3 id=&quot;1-文件系统&quot;&gt;&lt;a href=&quot;#1-文件系统&quot; class=&quot;head</summary>
      
    
    
    
    <category term="undergraduate" scheme="https://gme-hong.github.io/categories/undergraduate/"/>
    
    
    <category term="xv6" scheme="https://gme-hong.github.io/tags/xv6/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT 打开潘多拉魔盒，行业壁垒逐步瓦解</title>
    <link href="https://gme-hong.github.io/2023/10/06/ChatGPT/"/>
    <id>https://gme-hong.github.io/2023/10/06/ChatGPT/</id>
    <published>2023-10-06T14:43:39.000Z</published>
    <updated>2024-04-22T06:30:16.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一名非专精于NLP算法的同学，去详细论述ChatGPT的底层原理是很困难的。但好在最近为了搭建一个轻量化的RGM(Robotic Grasp Model)，接触到了一部分的图像注意力机制。想着CV、NLP本是一家亲，更何况ChatGPT的前世还可以追溯到《Attention is all you need》，为此斗胆写了一篇《ChatGPT 打开潘多拉魔盒，行业壁垒逐步瓦解》的爽文（对！爽文，让你轻松拿捏这个庞然大物），仅供同学们交流学习！</p><p>在本文中你将会了解到一些人工智能的前置知识、ChatGPT的概念、Transformer的基本原理、还有我关于ChatGPT的见解~</p><h2 id="人工智能的前置知识"><a href="#人工智能的前置知识" class="headerlink" title="人工智能的前置知识"></a>人工智能的前置知识</h2><p>ChatGPT作为一个人工智能LLM (Large Language Model) 大语言模型，细盘之前，我们先了解一下一些基本的人工智能知识。</p><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>机器学习，作为计算机专业研一同学必修的一门课程，足以体现其在人工智能领域举足轻重的地位。虽然现在学术前沿领域都在深度学习这条赛道上一发不可收拾，但是搞深度学习前还是得了解一些机器学习哦。<code>smooth_l1_loss</code>、<code>sigmoid</code>都会吧，同学？这些在用<code>pytorch</code>搞深度学习时常用的损失函数、激活函数可都是机器学习的知识哦。撇开HMM(Hidden Markov Model)、CRF(Conditional Random Field)等一些集成方法不谈，无论是决策树、K-means聚类、支持向量机、梯度提升树还是朴素贝叶斯，这些经典的机器学习模型也都是一些工业应用领域的常青树哦！（别问我为什么，去问度娘~）。</p><p>讲了一大堆机器学习的重要性，都还没说这到底是个啥。来，上概念。</p><p>机器学习(Machine Learning，ML)是指从有限的观测数据中学习(或“猜测”)出具有一般性的规律，并将这些规律应用到未观测数据样本上的方法。主要研究内容是学习算法。基本流程是基于数据产生模型，利用模型预测输出。目标是让模型有较好泛化能力。</p><p>什么？太抽象了，不好理解？</p><p>举一个经典的例子，我们挑西瓜的时候是如何判断一个西瓜是否成熟的呢？每个人一开始都是不会挑选的，但是随着我们耳濡目染，看了很多挑西瓜能手是怎么做的，发现可以通过西瓜的颜色，大小，产地，纹路，敲击声等等因素来判断，那么这个就是一个学习的过程。</p><p>那么人工智能、机器学习以及深度学习的关系是什么呢？或者说这个家族的族谱应该怎么画呢？</p><p>别急，一张图搞明白他们的关系。</p><style>.jeogydtqekno{zoom:50%;}</style><img lazyload src="/images/loading.svg" data-src="/2023/10/06/ChatGPT/10e55600dccd279069d0b58207d487c0.jpeg" class="jeogydtqekno" alt="10e55600dccd279069d0b58207d487c0.jpeg"><p>不知道你有没发现，这些方法的进化过程就是人类专精于摸鱼的过程。从以前纯人工作业到现在半人工、甚至全智能作业，从需要繁琐的数据预处理和客制化的特征提取手段的机器学习过渡到让机器自己去学特征的深度学习，从有监督任务过渡到自监督任务、多阶段深度学习算法过渡到端到端的算法，从手动搭建合适的深度网络模型到NAS(Neural Architecture Search) ……</p><p>哇，果然人类摸鱼的潜能是无限的~</p><h3 id="参数-权重："><a href="#参数-权重：" class="headerlink" title="参数 / 权重："></a>参数 / 权重：</h3><p>前文我们说过，ChatGPT是一个LLM。对于任何模型而言，无非就两种表示形式，即<code>y=f(x)</code>型和<code>P(y|x)</code>型。前者是确定性模型(也称非概率模型)，后者是概率模型。无非是哪一种，其中不可或缺的就是参数。</p><p>我们举几个例子说明参数的重要性。</p><p>如<code>y=f(x)</code>模型中最简单的y=wx+b。先不引入任何机器学习的概念，这就是我们小学学的二元一次方程，只不过我们当时w和b往往是给定的，我们最关注的就是如何解得x和y。但在机器学习中，往往x是给定的，需要我们求解出(拟合出)w和b的值。按照我们小学课本里教的，w就是斜率，b就是截距。说到这里不知道你意识到没，这就是知识啊！我们知道了其特定的含义就能在一个二维平面中可视化这条直线，机器知道了就能做一个简单的yes和no的回答。又如<code>P(y|x)</code>模型中的<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="20.88ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 9228.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(888,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g><g data-mml-node="mi" transform="translate(1939,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g><g data-mml-node="mo" transform="translate(2990,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3379,0)"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"/></g><g data-mml-node="mo" transform="translate(4259.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(5315.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(5593.6,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"/></g><g data-mml-node="mo" transform="translate(6163.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(6608.2,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(7358.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(7802.9,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(8561.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(8839.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container><br>无论是初始概率分布，状态转移矩阵还是观测矩阵都是HMM主要的参数来源啊，而这三个部分也正是HMM的核心。</p><p>而我们所津津乐道的ChatGPT就是一个除了参数还是参数的大怪物，其拥有这可怕的1750亿的参数规模(本来还想说一下其所需的浮点运算次数的，emmm，找了半天没找到)。要训练一个千亿参数量级的模型，所需要支持的算力那也应该不是我们能设想的。再加上<code>human in the loop</code>的机制，哇，烧钱的嘞。</p><h3 id="过拟合、欠拟合与模型退化"><a href="#过拟合、欠拟合与模型退化" class="headerlink" title="过拟合、欠拟合与模型退化"></a>过拟合、欠拟合与模型退化</h3><p>如果你已经把所有的菜都备齐了，炒菜的设备也上齐了，那么接下来就应该是生火开炒了——这里具体如何炒，先加盐还是先放醋针对不同的菜应该有不同的策略，正如机器学习针对不同的任务需要设计不同的特征提取策略一样，为此这里我们还是用深度学习的黑箱模型来说事(其实主要是我不会炒菜……)。最理想的状态肯定就是炒完后菜的口感最能满足你挑剔的嘴，但是事情往往并不会向我们所期待的那样，炒焦了和没炒熟都是很常见的情况。模型的训练也正如这个做菜的过程，稍不留神就过拟、欠拟。但这还是好的，最崩溃的情况是你拿一只大锅发现怎么样也炒不出小锅的味道，而且每次用大锅颠勺都还让你累的够呛。这也就是模型的退化现象，好像这就是自然界的规律，过犹而不及。正如Google的PaLM(5400亿参数)，微软和英伟达合作的MT-NLG(5300亿参数)跟ChatGPT比起来都差点意思。</p><h3 id="人类反馈强化学习（RLHF）"><a href="#人类反馈强化学习（RLHF）" class="headerlink" title="人类反馈强化学习（RLHF）"></a>人类反馈强化学习（RLHF）</h3><p>人类反馈强化学习，一听到这个名词是不是就感觉特别高大尚。害其实也没什么，就是智能还不够智能，还需要人类从中插一脚。RLHF最本质的特点就是<code>human in the loop</code>，也就是人在回路。当然认真看过流浪地球2的同学们应该还是不太陌生的。</p><p>RLHF 主要包括三个步骤：</p><ol><li>使用监督学习训练语言模型；</li><li>根据人类偏好收集比较数据并训练奖励模型；</li><li><strong>使用强化学习针对奖励模型优化语言模型。</strong></li></ol><p>它使模型能够通过从人类获取反馈，从而不断改进自身学习技能，从而有效地适应实际环境。都说到这个份上了，养过猫猫狗狗的同学应该就能get到了，你驯化它的过程就是RLHF。</p><h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><p>神经网络，都以“神经”这两个字命名了，那肯定就和人的神经元系统相当类似咯。无论是你眼镜接收到的视觉信息、皮肤感知到的触觉信息还是耳朵获取的听觉信息都需要从感受器通过电信号(和化学信号)的形式传导到神经中枢，而这就跟输入向量在神经网络的传导过程十分类似。对于冲动传输链路上的每一个神经元扮演了一个节流阀的作用(激活还是抑制)，类似于神经网络的前向传播过程，每一层的每个节点都能决定通过其这条沿线的权重大小。</p><style>.umvgtgdkruxw{}</style><img lazyload src="/images/loading.svg" data-src="/2023/10/06/ChatGPT/dcffceea100ade33ea53501be945d8ce.jpeg" class="umvgtgdkruxw"><style>.ndtrgltvnfsj{}</style><img lazyload src="/images/loading.svg" data-src="/2023/10/06/ChatGPT/0c2fb894842b39f67ecc33c9288dbd52.jpeg" class="ndtrgltvnfsj"><p>神经网络的结构正如图五所示，最基本形式的人工神经网络有三层神经元。信息从一层神经元流向另一层，就像在人脑中一样：</p><ol><li>输入层：数据进入系统的入口点</li><li>隐藏层：处理信息的地方</li><li>输出层：系统根据数据决定如何继续操作的位置</li></ol><h2 id="ChatGPT-的概念"><a href="#ChatGPT-的概念" class="headerlink" title="ChatGPT 的概念"></a>ChatGPT 的概念</h2><p>哇，终于写到正题了，eight hours later……</p><p>GPT 对应的是三个单词：Generative，Pre-Training，Transformer。</p><p><strong>Generative</strong>：生成式，比较好理解，通过学习历史数据，来生成<strong>全新</strong>的数据。请注意，这里是全新的哦！不过全新也要看你怎么理解，如果想说它能所回答你的每一个字是不是全新的，那肯定是不现实的。这种新应该是一种全新的、带有人类语言逻辑的语句组合。更直观地去理解Generative，那肯定就得提及DALL-E(emmm，这家伙也是OpenAI的)，这个东西能够根据一段场景描述性的文字来生成一张与之对应的、全新的图片(类似于上面对全新概念的理解，你总不能要0-255的像素值是全新的吧)。从这个角度去理解ChatGPT，那它就一个词生成器啊。例如ChatGPT已经生成了“今天晚上我们去打”，那么下一个生成的字/词就有可能是“台球”、“篮球”、“羽毛球”、“乒乓球”、“游戏”，它的生成逻辑就是从这些候选的单元中选出一个概率最大值。如果你使用过ChatGPT，并且详细观察过它回答你的方式，你可能会对「逐字」这个概念有更深的感触。</p><p><strong>Pre-Training</strong>：预训练，顾名思义就是预先训练的意思，说白了就是一个特征提取的过程。“预训练“方法的诞生是出于这样的现实：标注资源稀缺而无标注资源丰富(某种特殊的任务只存在非常少量的相关训练数据，以至于模型不能从中学习总结到有用的规律)。</p><p>举个简单的例子，现在有一个对英语一窍不通的同学和一个英语基础尚佳的同学同时去完成翻译并总结一篇英语技术文章的任务。对前者来说就需要先学会英文 26 个字母，进而学会单词语法等，再去了解这篇文章相关的技术，最后才能去完成我们指派的任务。但是对后者来做这个任务就相对简单的多，他只需要去大致了解一下这篇文章所涉及到的技术，便能很好的总结出来。</p><p>这就是预训练，<strong>先把一些通用能力提前训练出来</strong>。人工智能本身就是一个不断训练参数的过程，如果我们可以提前把通用能力相关的参数提前训练好，那么在一些特殊的场景，发现通用能力不能完全适配时，只做简单的参数微调即可，这样做大幅减少了每个独立训练预测任务的计算成本。反映在具体模型上就是：</p><ol><li>模型参数不再是随机初始化，而是通过一些任务(如语言模型)进行预训练</li><li>将训练任务拆解成共性学习和特性学习两个步骤</li></ol><p><strong>Transformer</strong>：这是 ChatGPT 的灵魂，它是一个神经网络架构。后文再进行详细的说明。</p><p>以上就是 ChatGPT 的基本概念，结合起来就是一个采用了预训练和强化学习策略的生成式神经网络模型，它能够对人类的对话进行模拟。</p><h2 id="Transformer基本知识"><a href="#Transformer基本知识" class="headerlink" title="Transformer基本知识"></a>Transformer基本知识</h2><p>因为介绍Transformer的文章很多啊，在此我就直接搬运王正学长在《<a class="link" href="https://juejin.cn/post/7277802797473841186">让非算法同学也能了解 ChatGPT 等相关大模型 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>》文章中论述的了。别看Transformer(变形金刚，很漫威)这个名字很玄乎，其实大致也就三个主要部分：Embedding、Self-Attention以及Softmax。</p><p>Embedding很好理解，就是要把输入的自然语言转换成机器能理解的向量表示。当然为了充分利用语言的序列特性，因此还需要加入额外的位置编码。</p><p>Self-Attention也就是我们常说的自注意力机制，emmm有点复杂，好像一句话不怎么讲的清楚，其实也就是<code>"What do I care most about myself"</code>。</p><p>Softmax这个好理解，直接上公式：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.27ex;" xmlns="http://www.w3.org/2000/svg" width="27.204ex" height="5.573ex" role="img" focusable="false" viewbox="0 -1460 12024.1 2463.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(1130,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(1680,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(2041,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2919,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(3448,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(4020,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(4409,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(5478.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(6534.5,0)"><g data-mml-node="mrow" transform="translate(994.8,710)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(1038,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(1541,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(1930,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(2722,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="munder"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="mi" transform="translate(1089,-285.4) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mi" transform="translate(1549.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(2015.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(3090.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(3479.6,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"/></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(4271.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><rect width="4860.6" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(11635.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container><br>这东西的本质就像我上面举的“今天晚上我们去打”的例子，就是选出一个最大概率呗。</p><hr><h3 id="第一步：embedding"><a href="#第一步：embedding" class="headerlink" title="第一步：embedding"></a>第一步：embedding</h3><p>embedding 的过程可以简单的理解为向量化。因为输入是一个个的词(token)，那需要把它映射成一个向量，embedding就是给定任何一个词，用一个向量来表示它。</p><p>在 embedding 的过程中，每个 token 都用一个单层神经网络转化为长度为 768(对于GPT-2)或 12288(对于ChatGPT的GPT-3)的 embedding 向量。</p><p>同时，模块中还有一个“辅助通路”(secondary pathway)，用于将 token 的整数位置转化为 embedding 向量。最后，将 token 值和 token 位置的 embedding 向量加在一起，生成最终的 embedding 向量序列。</p><p>那么为什么要将 token 值和 token 位置的 embedding 向量相加呢？只是尝试了各种不同的方法后发现这种方法似乎可行，而且神经网络的本身也认为，只要初始设置“大致正确”，通过足够的训练，通常算法可以自动调整细节。</p><p>以字符串“湖人”为例，在 gpt-2 中它可以将其转化为一系列长度为 768 的 embedding 向量，其中包括从每个 token 的值和位置中提取的信息。</p><style>.dbldgihvmxyo{zoom:50%;}</style><img lazyload src="/images/loading.svg" data-src="/2023/10/06/ChatGPT/40c8529d16291e27f2a83f703b82c16b.png" class="dbldgihvmxyo" alt="40c8529d16291e27f2a83f703b82c16b.png"><p>第一张图中就是 token embedding，纵向一列代表一个向量，可以看到最先排列的是“湖”所代表的向量，然后是“人”所代表的向量。第二张图是位置的 embedding，代表着这两个字的位置信息。将这两两个 embedding 相加得到了最终的 embedding 序列。</p><h3 id="第二步：Attention"><a href="#第二步：Attention" class="headerlink" title="第二步：Attention"></a>第二步：Attention</h3><p>Attention 是整个 transformer 的主要部分，其内部结构是非常复杂的，我作为一名非专业人士，无法面面俱到的将其中的细节完全解释清楚，因此只能把它的核心能力简单叙述一二。</p><p>在进行 embedding 之后，需要对一系列的“注意力块”进行数据操作(gpt3 中有 96 个注意力块)，而每个“注意力块”中都有一组 attention heads，每个 attention head 都独立地作用于 embedding 向量中不同值的块。</p><p>attention head 的作用就是对历史的 token 序列进行回顾，这里的历史 token 序列就是已经生成的文本，之后将这些信息进行打包，以便找到下一个 token。稍微具体的来说，attention head 的作用是重新组合与不同 token 相关的 embedding 向量的块，并赋予一定的权重。</p><p><strong>举个例子</strong>：</p><p>用 ChatGPT 翻译句子“蚂蚁集团”到“ant group”举例，首先进行上一步 embedding 操作，将句子向量化并吸收句子位置信息，得到一个句子的初始向量组。</p><img lazyload src="/images/loading.svg" data-src="/2023/10/06/ChatGPT/f6781e42fff838887dac39c51faa93c4.png" class title="f6781e42fff838887dac39c51faa93c4.png"><p>由于样本每个句子长短不同，所以每个句子都会是一个 512 x 512 的矩阵，如果长度不够就用 0 来代替。这样在训练时，无论多长的句子，都可以用一个同样规模的矩阵来表示。当然 512 是超参，可以在训练前调整大小。</p><p>接着，用每个字的初始向量分别乘以三个随机初始的矩阵W^Q,W^K,W^V分别得到三个量Qx，Kx，Vx，这样就得到了三个量：Qx，Kx，Vx，比如用“蚂”这个字举例：</p><style>.qzndkcdtgotu{zoom:50%;}</style><img lazyload src="/images/loading.svg" data-src="/2023/10/06/ChatGPT/af78a744ecc9dcf2b84d5a3e2ab46078.png" class="qzndkcdtgotu" alt="af78a744ecc9dcf2b84d5a3e2ab46078.png"><p>然后，计算每个单词的 Attention 数值，比如“蚂”字的 Attention 值就是用“蚂”字的 Q蚂Q蚂 分别乘以句子中其他单词的 K 值，两个矩阵相乘的数学含义就是衡量两个矩阵的相似度。</p><h3 id="第三步：将向量转为概率"><a href="#第三步：将向量转为概率" class="headerlink" title="第三步：将向量转为概率"></a>第三步：将向量转为概率</h3><p>继续用上面翻译的例子：用计算出的每个单词的 Attention 值，通过一个 SoftMax 转换(这里不必关注是怎么转换的)，计算出它跟每个单词的权重，这个权重比例所有加在一起要等于 1。再用每个权重乘以相对应的 V 值。所有乘积相加得到这个 Attention 值。</p><style>.gecmedpvdgjg{zoom:50%;}</style><img lazyload src="/images/loading.svg" data-src="/2023/10/06/ChatGPT/55e5bf98008def23eef58ba85ae0a828.png" class="gecmedpvdgjg" alt="55e5bf98008def23eef58ba85ae0a828.png"><p>这个 Attention 数值就是除了“蚂”字自有信息和位置信息以外，成功的得到了这个句子中每个单词的相关度信息。</p><p>在计算 Attention 之后，每个单词根据语义关系被打入了新的高维空间，这就是 Self-Attention(自注意力机制)。</p><p>但在 transformer 里，并不是代入了一个空间，而是代入了多个高维空间，叫做 Multi-Head Attention (多头注意力机制)。将高维空间引入模型训练的主要原因是它在训练时表现出很好的效果，这是人工智能科研论文的一个常见特点，研究人员凭借着极高的科研素养和敏感性，发现一些方向，并通过测试证明其有效性，但不一定有完美的理论支持。这为后续研究者提供了进一步完善的余地。</p><p>事实证明，如何提升Attention(Q，K，V)效率是 transformer 领域迭代最快的部分。</p><p>这就是 transformer 的大致原理，有一些细节我个人也没有深入研究，有兴趣的人可以自行去搜索。</p><hr><p><strong>！！！开始夹带私货！！！</strong></p><p>正如王正学长文章中所提到的——“如何提升Attention(Q，K，V)效率是 transformer 领域迭代最快的部分”，我是真的深有同感！之前还没那么多，但真的就是自己开始去跑代码的时候就知道，Attention是有多慢！！！特别是，我做的轻量化网络，就是那种除Self-Attention之外的部分占三分之一，Self-Attention占三分之二，参数量如此，GFLOPs更是如此……</p><p>既然都说到这里了，那我们也来倒腾一下CV领域的Attention呗。</p><style>.grjmsplipdna{zoom:50%;}</style><img lazyload src="/images/loading.svg" data-src="/2023/10/06/ChatGPT/cc640438c277e692b60b5e6996600585.jpeg" class="grjmsplipdna" alt="cc640438c277e692b60b5e6996600585.jpeg"><p>将Self-Attention机制引入CV领域相当重要的一篇文献就是《Non-local Neural Networks》。与对文本进行的Transformer类似，只不过由对文本的Embedding操作不再需要了，转而需要对完整的图像进行切块处理和对每一个小块进行位置编码(传统的CNN本来含有位置信息，因此没必要添加额外的位置信息)，接下来的操作和NLP中的Self-Attention大差不差了。</p><style>.ieoowinprjuc{zoom:50%;}</style><img lazyload src="/images/loading.svg" data-src="/2023/10/06/ChatGPT/618ca0f94d2d55e0bec876e5c4f2604f.png" class="ieoowinprjuc" alt="618ca0f94d2d55e0bec876e5c4f2604f.png"><p>如图所示的Self-Attention，这可怕的参数量……</p><p>后面还有一篇《CCNet: Criss-Cross Attention for Semantic Segmentation》是对NLNet的优化。强烈推荐看一下<a class="link" href="https://zhuanlan.zhihu.com/p/51393573">CCNet–于”阡陌交通”处超越恺明Non-local <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>这篇博客，写的也是相当好(主要是标题挺吸引^_^)。</p><style>.skgmgfsmpyxo{zoom:50%;}</style><img lazyload src="/images/loading.svg" data-src="/2023/10/06/ChatGPT/bd5342b6599340434ac528d0be5f58d1.png" class="skgmgfsmpyxo" alt="bd5342b6599340434ac528d0be5f58d1.png"><h2 id="为什么说ChatGPT打开了潘多拉魔盒"><a href="#为什么说ChatGPT打开了潘多拉魔盒" class="headerlink" title="为什么说ChatGPT打开了潘多拉魔盒"></a>为什么说ChatGPT打开了潘多拉魔盒</h2><p>前置内容说得太多了，终于开始说和标题有关的内容了，再拖拖都成标题党了。</p><p>不过在谈这个话题之前我还是想多说两句。要不是得完成课题作业，我也不至于议论这样的话题，确实以一个本科生的角度去观望整个行业确实有点管中窥豹。不过气氛都烘托到这了，放弃不再执笔也很难受啊！！权当给未来的我剖析当下精神状态的样本吧……</p><p>先引用几位大佬的话来镇镇场。</p><p>微软创始人比尔盖茨曾表示：“ChatGPT的诞生丝毫不亚于个人电脑的诞生。”英伟达创始人黄仁勋也表示：“ChatGPT只是起点，我们正处于AI的iPhone时刻。”谷歌前AI团队成员、deeplearning.ai创始人吴恩达曾在推特上发表言论，认为ChatGPT等大型语言模型是“人工智能领域最为激动人心的进展之一。”</p><p>之所以说ChatGPT打开了潘多拉魔盒是因为其影响足以推动各行各业的变革。</p><p>首先找我来说说作为一个学生，ChatGPT到底给我带来哪些影响。</p><p>ChatGPT代写课程作业(本来这个课程作业就想用它快速解决的)啥的就不多赘述了，不符合核心价值观，更多的想谈一谈ChatGPT对我知识检索习惯的改变。相信大学数学生跟我一样，在没有ChatGPT之前，我们都基于一个问题打开度娘/Google/Bing，然后输出问题的描述性语句，在通过关键词检索的词条中去检索自己需要的答案。正如我描述的一样，这一套流程下来是相当繁琐的，这意味着知识的检索成本相当之高。从这里就会给绝大部人形成一种习惯，或者是一种刻板印象：检索知识的过程是比较繁琐的，不能做到对陌生知识一遇一检。然后我们细化对知识的分类，很多陌生知识的复杂程度是不一样的，比如说你在冲浪时遇到一个陌生概念“NAS”，如果你只是想知道这个名词是个什么东西，那这个陌生知识就很轻量，因此你期待所消耗在这个陌生知识上的时间成本就应该很小，但是在ChatGPT出现之前，你还是得经历上面那个过程。但其实这么轻量的搜索，很多检索系统也能直接在第一个词条给到你想要的答案，但真正迈不出一遇一检的原因其实是你大脑对这个检索过程的定义。</p><p>基于ChatGPT的内容式问答检索，这些轻量的知识检索过程完全可以以极低的时间成本实现，真正能够做到一遇一检。这虽然不能将你的知识网络的深度延伸到一个新的层次，但是拓展你知识网络的阔度是完全没有任何问题的。</p><p>由于我大二暑假做过一个“基于2D虚拟人语音驱动”的项目，通过现有的深度学习技术已经完全可以实现模仿一个虚拟的你出来了，再配合上语音克隆的技术和ChatGPT作为对话的中转站。一个在样貌、声线、甚至是语气与微表情都和你如出一辙的虚拟人完全可以应用到生产生活的方方面面。未来注定是元宇宙的时代！</p><p>而ChatGPT对一些传统行业的打击也同样是致命的，如翻译(包括同声翻译)、在线客服等，甚至我在想，ChatGPT结合具身智能在不远的将来能否替代掉那些以时间量度作为价值换算的行业。</p><p>那么说回程序员，本来这个职业还是有蛮高的技术门槛的，一门编程语言的学习，以及其周边技术的掌握确实都是需要时间花费的。而矛盾的是，一般的人想要用到编程这项技术往往只是希望用它来减轻一些重复工作，他们是没有强烈的通过编程生产变现需求的。因此对于他们来说编程只是工具不是目的，如果可以以其他方式达到他们的目的，这个工具是可有可无的。ChatGPT的出现，完全满足了这一需求。一个脚本、一个前端界面、一个数据处理分析程序，这种轻量的编程需求，ChatGPT完全可以胜任。因此无形之中，编程好像也变得不再是程序员的专利，行业的门槛无形之中就被连根拔起。</p><p>当然对于程序员来说，这个工具的出现也是利好的。只是从我的经历看来，我完全可以将重心全放在业务功能的如何实现上，而不用太多地去考虑如何用代码实现。现在基于ChatGPT的代码补全工具也层出不穷，虽然我体验下来也还是感觉没多大作用，但我们也还是需要给这项技术足够的包容，毕竟它刚出来还不到一年。</p><p>写到这里，实在江郎才尽了！Happy Ending~</p><h2 id="参考文章-文献"><a href="#参考文章-文献" class="headerlink" title="参考文章/文献"></a>参考文章/文献</h2><ol><li><a class="link" href="https://juejin.cn/post/7277802797473841186">让非算法同学也能了解 ChatGPT 等相关大模型 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link" href="https://zhuanlan.zhihu.com/p/370859857">教你深入理解“预训练” <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link" href="https://arxiv.org/abs/1706.03762">Attention Is All You Need <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link" href="https://zhuanlan.zhihu.com/p/338817680">Transformer模型详解（图解最完整版） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作为一名非专精于NLP算法的同学，去详细论述ChatGPT的底层原理是很困难的。但好在最近为了搭建一个轻量化的RGM(Robotic Gra</summary>
      
    
    
    
    
    <category term="AI" scheme="https://gme-hong.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>First try</title>
    <link href="https://gme-hong.github.io/2022/03/11/first-try/"/>
    <id>https://gme-hong.github.io/2022/03/11/first-try/</id>
    <published>2022-03-11T04:00:00.000Z</published>
    <updated>2024-04-22T06:28:07.383Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
